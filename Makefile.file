CC = x86_64-unknown-linux-gnu-g++
AR = ar
CFLAGS = -g -Wall -rdynamic -funwind-tables -std=c++14 -fPIC
OPT_STACK_PROTECTOR = -fstack-protector-strong -fstack-protector-all
OPT_WARNING = -Wall -Wformat -Werror=format-security -fexceptions
CFLAGS += -Wunused-variable 
CFLAGS += -fno-strict-aliasing
CFLAGS += $(OPT_WARNING) $(OPT_STACK_PROTECTOR)

CPPFLAGS = $(CFLAGS)

SHARED = -shared

_start:all

ifndef ENV
ENV = x86
endif

ifeq ($(ENV), x86)
PLATFORM = x86
GCC=gcc
# CC=/opt/rh/devtoolset-9/root/usr/bin/g++
endif

ifeq ($(ENV), arm)
PLATFORM = x86
CC=aarch64-linux-gnu-g++
AR=aarch64-linux-gnu-ar
GCC=aarch64-linux-gnu-gcc
endif

ifndef PLATFORM
$(error error param ! usage: make ENV=x86|arm)
endif

OUT_LIB_DIR = ./out/$(PLATFORM)/lib/
OUT_BIN_DIR = ./out/$(PLATFORM)/bin/

INCLUDES = -I./include/ -I./include/rpc/ -I./include/openssl
EXTERNAL_LIB_DIR = -L ./external_lib/$(PLATFORM)/
ECHO_TAGET = @echo "****************$@*******************"

%.o:%.cpp
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)
.o.c:
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)
.S.o:
	$(GCC) -fPIC $(INCLUDES) -c $< -o $@

#//rpc 依赖库
.PHONY:rpc
.PHONY:rpc_clean

RPC_CFILE = $(wildcard ./rpc/*.cpp)
RPC_SFILE = $(wildcard ./rpc/asm/$(PLATFORM)/*.S)
RPC_OFILE = $(RPC_CFILE:%.cpp=%.o) $(RPC_SFILE:%.S=%.o)
RPC_A_TARGET = $(OUT_LIB_DIR)librpc_tool.a
RPC_SO_TARGET = $(OUT_LIB_DIR)librpc_tool.so

$(RPC_A_TARGET):$(RPC_OFILE)
	$(ECHO_TAGET)
	$(AR) rcv $@ $^

$(RPC_SO_TARGET):$(RPC_OFILE)
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) $(SHARED) $^ -o $@ -lpthread  -lc

rpc: $(RPC_SO_TARGET) #$(RPC_A_TARGET)

rpc_clean:
	rm -rf $(RPC_OFILE)


.PHONY:server
.PHONY:server_clean
#服务端
all:server client
clean: server_clean client_clean

# KEY_CFILE     = $(wildcard ./src/key/*.cpp)
# KEY_OFILE     = $(KEY_CFILE:%.cpp=%.o)
# KEY_TARGET    = $(OUT_LIB_DIR)libcmkey.so
# $(KEY_TARGET):$(KEY_OFILE)
# 	$(ECHO_TAGET)
# 	$(CC) $(CFLAGS) $(SHARED) -o $@ $^


SERVER_CFILE  = $(wildcard ./src/server/*.cpp)
SERVER_OFILE  = $(SERVER_CFILE:%.cpp=%.o)
SERVER_TARGET = $(OUT_BIN_DIR)gmcmServer
$(SERVER_TARGET):$(SERVER_OFILE)
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) -o $@ $^ -L$(OUT_LIB_DIR) -lrpc_tool $(EXTERNAL_LIB_DIR) -lhiredis -lcjson -lssl -lcrypto -ldl -lm -lpthread

server: $(SERVER_TARGET) 
server_clean:
	rm -rf  $(SERVER_TARGET)  $(SERVER_OFILE)

.PHONY:client
.PHONY:client_clean
#客户端
SDK_CFILE = $(wildcard ./src/client/sdk/*.cpp)
SDK_OFILE = $(SDK_CFILE:%.cpp=%.o)
SDK_TARGET = $(OUT_LIB_DIR)libgmcm.so

CLIENT_CFILE = $(wildcard ./src/client/simpleClient/*.cpp)
CLIENT_OFILE = $(CLIENT_CFILE:%.cpp=%.o)
CLIENT_TARGET = $(OUT_BIN_DIR)simpleClient

client:$(SDK_TARGET) $(CLIENT_TARGET)

client_clean:
	rm -rf $(CLIENT_OFILE) $(SDK_TARGET) $(SDK_OFILE) $(CLIENT_TARGET)

$(SDK_TARGET):$(SDK_OFILE) $(RPC_SO_TARGET)
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) $(SHARED) -o $@ $^

$(CLIENT_TARGET):$(SDK_TARGET) $(CLIENT_OFILE)  $(RPC_SO_TARGET) 
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) -o $@  $^ $(INCLUDES) $(EXTERNAL_LIB_DIR) -lssl -lcrypto -lm -lpthread -ldl

EXTERNAL_LIB = ./external_lib/$(PLATFORM)/
INSTALL_LIB = $(EXTERNAL_LIB)libcrypto.so.1.1 $(EXTERNAL_LIB)libssl.so.1.1 $(EXTERNAL_LIB)libhiredis.so 
INSTALL_LIB += $(KEY_TARGET) $(CERT_TARGET) $(ALG_TARGET) $(RPC_SO_TARGET) $(LOCAL_MEM_TARGET)
INSTALL_BIN = $(SERVER_TARGET)


.PHONY:test
.PHONY:test_clean

TEST_POROTST_TARGET = $(OUT_BIN_DIR)/testProtoSt
TEST_POROTST_CFILE = ./src/gtest/testProtoStruct.cpp
TEST_EVENT_WAIT_TARGET = $(OUT_BIN_DIR)/testEventWait
TEST_EVENT_WAIT_CFILE = ./src/gtest/testEventWait.cpp

$(TEST_POROTST_TARGET):$(TEST_POROTST_CFILE)
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) -o $@  $^ $(INCLUDES) 
$(TEST_EVENT_WAIT_TARGET):$(TEST_EVENT_WAIT_CFILE)
	$(ECHO_TAGET)
	$(CC) $(CFLAGS) -o $@  $^ $(INCLUDES) -llocal_mem -lpthread

test_clean:
	rm $(TEST_POROTST_TARGET) $(TEST_EVENT_WAIT_TARGET)

test:$(TEST_POROTST_TARGET) $(TEST_EVENT_WAIT_TARGET)


install:
	mkdir /gmcm/ -p
	mkdir /gmcm/log -p
	mkdir /gmcm/bin/ -p
	cp $(INSTALL_BIN) /gmcm/bin/
	cp $(INSTALL_LIB) /lib/
	cp $(EXTERNAL_LIB)libstdc++.so.6.0.22 /lib64/